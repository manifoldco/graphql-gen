type ValueProp {
  "Heading of a value proposition."
  header: String!
  "Body of a value proposition."
  body: String!
}
type UpdateProviderBody {
  teamId: [String]
  label: [String]
  name: [String]
  logoUrl: [String]
  supportEmail: String
  documentationUrl: String
}
type UpdateProvider {
  id: ID!
  body: [UpdateProviderBody]!
}
type UpdateProductBody {
  name: [String]
  logoUrl: [String]
  listing: [ProductListing]
  "140 character sentence positioning the product."
  tagline: String
  "A list of value propositions of the product."
  valueProps: [ValueProp]
  images: [String]
  supportEmail: String
  documentationUrl: String
  "URL to this Product's Terms of Service. If provided is true, thena url must be set. Otherwise, provided is false."
  termsUrl: String
  featureTypes: [FeatureType]
  integration: UpdateProductBodyIntegration
  tags: [ProductTags]
}
type UpdateProductBodyIntegration {
  provisioning: [String]
  baseUrl: String
  ssoUrl: String
  version: UpdateProductBodyIntegrationVersion
  features: [ProductIntegrationFeatures]
}
enum UpdateProductBodyIntegrationVersion {
  V1
}
type UpdateProduct {
  id: ID!
  body: [UpdateProductBody]!
}
type UpdatePlanBody {
  name: [String]
  label: [String]
  state: [String]
  "Used in conjuction with resizable_to to set or unset the list"
  hasResizeConstraints: Boolean
  resizableTo: [PlanResizeList]
  "Array of Region IDs"
  regions: ID
  "Array of Feature Values"
  features: [FeatureValue]
  "The number of days a user gets as a free trial when subscribing tothis plan. Trials are valid only once per product; changing plansor adding an additional subscription will not start a new trial."
  trialDays: Int
  "Dollar value in cents"
  cost: Int
}
type UpdatePlan {
  id: ID!
  body: [UpdatePlanBody]!
}
type RegionBody {
  platform: [String]!
  location: [String]!
  name: String!
  priority: Number!
}
type Region {
  id: ID!
  type: RegionType!
  version: RegionVersion!
  body: [RegionBody]!
}
enum RegionVersion {
  Version1
}
enum RegionType {
  REGION
}
type ProviderBody {
  teamId: ID!
  label: [String]!
  name: [String]!
  logoUrl: [String]
  supportEmail: String
  documentationUrl: String
}
type Provider {
  id: ID!
  version: ProviderVersion!
  type: ProviderType!
  body: [ProviderBody]!
}
enum ProviderType {
  PROVIDER
}
enum ProviderVersion {
  Version1
}
type ProductListing {
  "When true, everyone can see the product when requested. When false it willnot be visible to anyone except those on the provider team."
  public: Boolean
  "When true, the product will be displayed in product listings alongsideother products. When false the product will be excluded from listings,but can still be provisioned directly if it's label is known.Any pages that display information about the product when not listed,should indicate to webcrawlers that the content should not be indexed."
  listed: Boolean
  "Object to hold various flags for marketing purposes only. These are valuesthat need to be stored, but should not affect decision making in code. Ifwe find ourselves in a position where we think they should, we shouldconsider refactoring our listing definition."
  marketing: ProductListingMarketing
}
type ProductListingMarketing {
  "Indicates whether or not the product is in `Beta` and should beadvertised as such. This does not have any impact on who can access theproduct, it is just used to inform consumers through our clients."
  beta: Boolean
  "Indicates whether or not the product is in `New` and should beadvertised as such. This does not have any impact on who can access theproduct, it is just used to inform consumers through our clients."
  new: Boolean
  "Indicates whether or not the product is in `New` and should beadvertised as such. This does not have any impact on who can access theproduct, it is just used to inform consumers through our clients."
  featured: Boolean
}
type ProductIntegrationFeatures {
  "Indicates whether or not this product supports resource transitions tomanifold by access_code."
  accessCode: Boolean
  "Represents whether or not this product supports SingleSign On"
  sso: Boolean
  "Represents whether or not this product supports changingthe plan of a resource."
  planChange: Boolean
  "Describes how the region for a resource is specified, ifunspecified, then regions have no impact on thisresource."
  region: ProductIntegrationFeaturesRegion
}
enum ProductIntegrationFeaturesRegion {
  USER_SPECIFIED
  UNSPECIFIED
}
type ProductBody {
  providerId: ID!
  "Product labels are globally unique and contain the provider name."
  label: [String]!
  name: [String]!
  state: [String]!
  listing: [ProductListing]!
  logoUrl: [String]!
  "140 character sentence positioning the product."
  tagline: String!
  "A list of value propositions of the product."
  valueProps: [ValueProp]!
  images: [String]!
  supportEmail: String!
  documentationUrl: String!
  "URL to this Product's Terms of Service. If provided is true, thena url must be set. Otherwise, provided is false."
  terms: ProductBodyTerms!
  featureTypes: [FeatureType]!
  billing: ProductBodyBilling!
  integration: ProductBodyIntegration!
  tags: [ProductTags]
}
type ProductBodyIntegration {
  provisioning: [String]!
  baseUrl: String!
  ssoUrl: String
  version: ProductBodyIntegrationVersion!
  features: [ProductIntegrationFeatures]!
}
enum ProductBodyIntegrationVersion {
  V1
}
type ProductBodyBilling {
  type: ProductBodyBillingType!
  currency: ProductBodyBillingCurrency!
}
enum ProductBodyBillingCurrency {
  USD
}
enum ProductBodyBillingType {
  MONTHLY_PRORATED
  MONTHLY_ANNIVERSARY
  ANNUAL_ANNIVERSARY
}
type ProductBodyTerms {
  url: String
  provided: Boolean!
}
type Product {
  id: ID!
  version: ProductVersion!
  type: ProductType!
  body: [ProductBody]!
}
enum ProductType {
  PRODUCT
}
enum ProductVersion {
  Version1
}
type PlanBody {
  providerId: ID!
  productId: ID!
  name: [String]!
  label: [String]!
  state: [String]!
  resizableTo: [PlanResizeList]
  "Array of Region IDs"
  regions: ID!
  "Array of Feature Values"
  features: [FeatureValue]!
  "The number of days a user gets as a free trial when subscribing tothis plan. Trials are valid only once per product; changing plansor adding an additional subscription will not start a new trial."
  trialDays: Int
  "Dollar value in cents."
  cost: Int!
}
type Plan {
  id: ID!
  version: PlanVersion!
  type: PlanType!
  body: [PlanBody]!
}
enum PlanType {
  PLAN
}
enum PlanVersion {
  Version1
}
type FeatureValueDetails {
  label: [String]!
  name: [String]!
  "The cost that will be added to the monthly plan cost when this valueis selected or is default for the plan.Cost is deprecated in favor of the `price.cost` field."
  cost: Int
  "Price describes the cost of a feature. It should be preferred overthe `cost` property."
  price: FeatureValueDetailsPrice
  numericDetails: [FeatureNumericDetails]
}
type FeatureValueDetailsPrice {
  "Cost is the price in cents that will be added to plan's base costwhen this value is selected or is default for the plan.Number features should use the cost range instead."
  cost: Int
  "When a feature is used to multiply the cost of the plan or ofanother feature, multiply factor is used for calculation.A feature cannot have both a cost and a multiply factor."
  multiplyFactor: Number
  "Price describes how the feature cost should be calculated."
  formula: [String]
  "Description explains how a feature is calculated to the user."
  description: String
}
type FeatureValue {
  feature: [String]!
  value: [String]!
}
type FeatureType {
  label: [String]!
  name: [String]!
  type: FeatureTypeType!
  "This sets whether or not the feature can be customized by a consumer."
  customizable: Boolean
  "This sets whether or not the feature can be upgraded by the consumer after theresource has provisioned. Upgrading means setting a higher value or selecting ahigher element in the list."
  upgradable: Boolean
  "This sets whether or not the feature can be downgraded by the consumer after theresource has provisioned. Downgrading means setting a lower value or selecting alower element in the list."
  downgradable: Boolean
  "Sets if this feature’s value is trackable from the provider,this only really affects numeric constraints."
  measurable: Boolean
  values: [FeatureValuesList]
}
enum FeatureTypeType {
  BOOLEAN
  STRING
  NUMBER
}
type FeatureNumericRange {
  "Defines the end of the range ( inclusive ), from the previous, or 0;where the cost_multiple starts taking effect. If set to -1 this defines therange to infinity, or the maximum integer the system can handle( whichever comes first )."
  limit: Int
  "An integer in 10,000,000ths of cents, will be multiplied by thenumeric value set in the feature to determine the cost."
  costMultiple: Int
}
type FeatureNumericDetails {
  "Sets the increment at which numbers can be selected if customizable, bydefault this is 1; for example, setting this to 8 would only allow integersin increments of 8 ( 0, 8, 16, ... ). This property is not used if thefeature is measurable; except if it is set to 0, setting the increment to 0means this numeric details has no scale, and will not be or customizable.Some plans may not have a measureable or customizable feature."
  increment: Int
  "Minimum value that can be set by a user if customizable"
  min: Int
  "Maximum value that can be set by a user if customizable"
  max: Int
  "Applied to the end of the number for display, for example the ‘GB’ in ‘20 GB’."
  suffix: String
  costRanges: [FeatureNumericRange]
}
type ExpandedProduct {
  id: ID!
  version: ExpandedProductVersion!
  type: ExpandedProductType!
  body: [ProductBody]!
  plans: [ExpandedPlan]
  provider: [Provider]!
}
enum ExpandedProductType {
  PRODUCT
}
enum ExpandedProductVersion {
  Version1
}
type ExpandedPlan {
  id: ID!
  version: ExpandedPlanVersion!
  type: ExpandedPlanType!
  body: [ExpandedPlanBody]!
}
enum ExpandedPlanType {
  PLAN
}
enum ExpandedPlanVersion {
  Version1
}
type Error {
  "The error type"
  type: String!
  "Explanation of the errors"
  message: [String]!
}
type CreateRegion {
  body: [RegionBody]!
}
type CreateProvider {
  body: [ProviderBody]!
}
type CreateProduct {
  body: [ProductBody]!
}
type CreatePlan {
  body: [PlanBody]!
}
